// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgres"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("AWS_AURORA_URL")
}

model User {
  id            String         @id @default(uuid())
  username      String
  email         String
  phoneNumber   String?
  posts         Post[]
  comments      Comment[]      @relation("UserComments")
  likes         Like[]         @relation("UserLikes")
  questionnaire Questionnaire?
  liveChats     LiveChat[]
  messages      Message[]      @relation("UserMessages")
  readLater     String[]       @default([])
  events        Event[]
}

model Post {
  id       String    @id @default(uuid())
  username String
  content  String
  likes    Like[]
  comments Comment[]

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Like {
  id       Int    @id @default(autoincrement())
  username String

  user   User   @relation("UserLikes", fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@unique([postId, userId])
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  user   User   @relation("UserComments", fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Questionnaire {
  id        String     @id @default(uuid())
  responses Response[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Response {
  id       Int     @id @default(autoincrement())
  question String
  answer   String?

  Questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
  questionnaireId String
}

model LiveChat {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  messages  Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  userId     String
  liveChatId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation("UserMessages", fields: [userId], references: [id], onDelete: Cascade)
  liveChat   LiveChat @relation(fields: [liveChatId], references: [id], onDelete: Cascade)
  seen       Boolean  @default(false)
}

model Event {
  id                       Int      @id @default(autoincrement())
  title                    String
  date                     DateTime @map("date")
  duration                 String
  userId                   String
  info                     String?  @default("")
  is24HourNotificationSent Boolean  @default(false)
  is1HourNotificationSent  Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
